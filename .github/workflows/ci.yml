name: ci

env:
  HOMEBREW_NO_INSTALL_CLEANUP: 1

on:
  push:
    paths:
      - "**/CMakeLists.txt"
      - "**.cmake"
      - "**.f90"
      - ".github/workflows/ci.yml"
      - "!cmake/netcdf.cmake"
      - "!cmake/netcdf-c.cmake"
      - "!cmake/hdf5.cmake"
      - "!scripts/**"

jobs:

  base:
    runs-on: ${{ matrix.img.os }}
    timeout-minutes: 15

    strategy:
      matrix:
        shared: [true, false]
        img: [
          {os: ubuntu-latest, cmd: sudo apt update && sudo apt install --no-install-recommends ninja-build libnetcdff-dev},
        ]

    steps:
    - uses: actions/checkout@v3

    - name: install system libs
      run: ${{ matrix.img.cmd }}

    - run: >-
        cmake
        --preset multi
        --install-prefix ${{ runner.temp }}
        -DBUILD_SHARED_LIBS:BOOL=${{ matrix.shared }}

    - run: cmake --build --preset debug
    - run: ctest --preset debug

    - run: cmake --build --preset release
    - run: ctest --preset release

    - run: cmake --install build

    - name: configure examples
      run: >-
        cmake
        -S example
        -B example/build
        -DCMAKE_PREFIX_PATH=${{ runner.temp }}
        -DBUILD_SHARED_LIBS:BOOL=${{ matrix.shared }}
    - name: build examples
      run: cmake --build example/build
    - name: Test examples
      run: ctest --test-dir example/build -V


  linux-build:
    needs: base
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - uses: actions/checkout@v3

    - name: install libs
      run: |
        sudo apt update
        sudo apt install --no-install-recommends libhdf5-dev

    - name: Configure NetCDF4
      run: cmake -S scripts -B scripts/build -DCMAKE_INSTALL_PREFIX=${{ runner.temp }}

    - name: Build/install NetCDF4
      run: cmake --build scripts/build --parallel

    - name: configure nc4fortran
      run: >-
        cmake
        --preset default
        --install-prefix ${{ runner.temp }}
        -DCMAKE_PREFIX_PATH=${{ runner.temp }}

    - run: cmake --build --preset default --parallel
    - run: ctest --preset default
    - run: cmake --install build

    - name: configure examples
      run: cmake -S example -B example/build -DCMAKE_PREFIX_PATH=${{ runner.temp }}
    - name: build examples
      run: cmake --build example/build --parallel
    - name: Test examples
      run: ctest --test-dir example/build -V


  linux-coverage:
    if: github.event_name == 'release'
    needs: base
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: install prereqs
      run: |
        sudo apt update
        sudo apt install --no-install-recommends libnetcdff-dev

    - name: install Gcovr
      run: pip install gcovr

    - run: cmake --preset coverage
    - run: cmake --build --preset coverage --parallel

    - name: Code coverage
      run: cmake --build --preset run-coverage

    - uses: actions/upload-artifact@v3
      with:
        name: coverage-report-html
        path: build-coverage/coverage/



  mac:
    runs-on: macos-latest
    timeout-minutes: 30

    steps:
    - uses: actions/checkout@v3

    - name: install libs
      run: |
        brew install hdf5 netcdf
        brew reinstall gcc

    - name: Configure NetCDF4
      run: cmake -S scripts -B scripts/build --install-prefix ${{ runner.temp }}

    - name: Build/install NetCDF4
      run: cmake --build scripts/build --parallel

    - name: configure nc4fortran
      run: >-
        cmake
        --preset default
        --install-prefix ${{ runner.temp }}
        -DCMAKE_PREFIX_PATH=${{ runner.temp }}

    - run: cmake --build --preset default
    - run: ctest --preset default
    - run: cmake --install build

    - name: configure examples
      run: cmake -S example -B example/build -DCMAKE_PREFIX_PATH=${{ runner.temp }}
    - name: build examples
      run: cmake --build example/build --parallel
    - name: Test examples
      run: ctest --test-dir example/build -V
